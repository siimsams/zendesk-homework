// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/scorer.proto

package scorer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScorerService_GetCategoryScores_FullMethodName         = "/scorer.ScorerService/GetCategoryScores"
	ScorerService_GetCategoryScoresByTicket_FullMethodName = "/scorer.ScorerService/GetCategoryScoresByTicket"
	ScorerService_GetOverallScore_FullMethodName           = "/scorer.ScorerService/GetOverallScore"
	ScorerService_GetPeriodOverPeriodChange_FullMethodName = "/scorer.ScorerService/GetPeriodOverPeriodChange"
)

// ScorerServiceClient is the client API for ScorerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScorerServiceClient interface {
	GetCategoryScores(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*CategoryScoresResponse, error)
	GetCategoryScoresByTicket(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*CategoryScoresByTicketResponse, error)
	GetOverallScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*OverallScoreResponse, error)
	GetPeriodOverPeriodChange(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*PeriodOverPeriodChangeResponse, error)
}

type scorerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScorerServiceClient(cc grpc.ClientConnInterface) ScorerServiceClient {
	return &scorerServiceClient{cc}
}

func (c *scorerServiceClient) GetCategoryScores(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*CategoryScoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryScoresResponse)
	err := c.cc.Invoke(ctx, ScorerService_GetCategoryScores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorerServiceClient) GetCategoryScoresByTicket(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*CategoryScoresByTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryScoresByTicketResponse)
	err := c.cc.Invoke(ctx, ScorerService_GetCategoryScoresByTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorerServiceClient) GetOverallScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*OverallScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OverallScoreResponse)
	err := c.cc.Invoke(ctx, ScorerService_GetOverallScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorerServiceClient) GetPeriodOverPeriodChange(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*PeriodOverPeriodChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeriodOverPeriodChangeResponse)
	err := c.cc.Invoke(ctx, ScorerService_GetPeriodOverPeriodChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScorerServiceServer is the server API for ScorerService service.
// All implementations must embed UnimplementedScorerServiceServer
// for forward compatibility.
type ScorerServiceServer interface {
	GetCategoryScores(context.Context, *ScoreRequest) (*CategoryScoresResponse, error)
	GetCategoryScoresByTicket(context.Context, *ScoreRequest) (*CategoryScoresByTicketResponse, error)
	GetOverallScore(context.Context, *ScoreRequest) (*OverallScoreResponse, error)
	GetPeriodOverPeriodChange(context.Context, *ScoreRequest) (*PeriodOverPeriodChangeResponse, error)
	mustEmbedUnimplementedScorerServiceServer()
}

// UnimplementedScorerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScorerServiceServer struct{}

func (UnimplementedScorerServiceServer) GetCategoryScores(context.Context, *ScoreRequest) (*CategoryScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryScores not implemented")
}
func (UnimplementedScorerServiceServer) GetCategoryScoresByTicket(context.Context, *ScoreRequest) (*CategoryScoresByTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryScoresByTicket not implemented")
}
func (UnimplementedScorerServiceServer) GetOverallScore(context.Context, *ScoreRequest) (*OverallScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverallScore not implemented")
}
func (UnimplementedScorerServiceServer) GetPeriodOverPeriodChange(context.Context, *ScoreRequest) (*PeriodOverPeriodChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeriodOverPeriodChange not implemented")
}
func (UnimplementedScorerServiceServer) mustEmbedUnimplementedScorerServiceServer() {}
func (UnimplementedScorerServiceServer) testEmbeddedByValue()                       {}

// UnsafeScorerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScorerServiceServer will
// result in compilation errors.
type UnsafeScorerServiceServer interface {
	mustEmbedUnimplementedScorerServiceServer()
}

func RegisterScorerServiceServer(s grpc.ServiceRegistrar, srv ScorerServiceServer) {
	// If the following call pancis, it indicates UnimplementedScorerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScorerService_ServiceDesc, srv)
}

func _ScorerService_GetCategoryScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorerServiceServer).GetCategoryScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScorerService_GetCategoryScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorerServiceServer).GetCategoryScores(ctx, req.(*ScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScorerService_GetCategoryScoresByTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorerServiceServer).GetCategoryScoresByTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScorerService_GetCategoryScoresByTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorerServiceServer).GetCategoryScoresByTicket(ctx, req.(*ScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScorerService_GetOverallScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorerServiceServer).GetOverallScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScorerService_GetOverallScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorerServiceServer).GetOverallScore(ctx, req.(*ScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScorerService_GetPeriodOverPeriodChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorerServiceServer).GetPeriodOverPeriodChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScorerService_GetPeriodOverPeriodChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorerServiceServer).GetPeriodOverPeriodChange(ctx, req.(*ScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScorerService_ServiceDesc is the grpc.ServiceDesc for ScorerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScorerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scorer.ScorerService",
	HandlerType: (*ScorerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategoryScores",
			Handler:    _ScorerService_GetCategoryScores_Handler,
		},
		{
			MethodName: "GetCategoryScoresByTicket",
			Handler:    _ScorerService_GetCategoryScoresByTicket_Handler,
		},
		{
			MethodName: "GetOverallScore",
			Handler:    _ScorerService_GetOverallScore_Handler,
		},
		{
			MethodName: "GetPeriodOverPeriodChange",
			Handler:    _ScorerService_GetPeriodOverPeriodChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scorer.proto",
}
